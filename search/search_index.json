{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Hi Hi?","text":"<p>Currently working as a Data Science Manager @Agoda (a Booking holdings company). I have built and ... </p>"},{"location":"#work-history","title":"Work History","text":"<ul> <li>Data Science Manager @ Agoda - 2019 - Present<ul> <li>Managing teams in Fraud, Personalization, LLM, Marketing &amp; Anomaly Detection</li> </ul> </li> <li>DS/Operation Research @ HP (Indigo Subdivision) \u2014 2016 - 2018</li> </ul>"},{"location":"index_old/","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"index_old/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"index_old/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"writing/","title":"Writing","text":"<p>I decided to write a blog to share my thoughts, experiences, and knowledge I gained over the years of working in the field of Data Science and DS management. I look at those posts as my personal notes, and I hope they will be useful for others as well.</p>"},{"location":"writing/#talks-and-presentations","title":"Talks and Presentations","text":"<ul> <li>Lighting Talk: You Don't Need ML for That</li> <li>Medium Article (Agoda Engineering Blog): What we do on the data science team</li> </ul>"},{"location":"writing/2024/03/28/pip%20install%20pain%20%28why%20you%20should%20use%20different%20environments%20for%20different%20projects%29/","title":"pip install pain (why you should use different environments for different projects)","text":"<p>pyenve + virtualenv + poetry = \u2764\ufe0f</p> <p>I am always saying to my friends that all of those tools should have a total hour saved counter. I am sure that the number will be huge.</p> <p>I think I spent more time debugging and fixing my Python environment than actually writing code. I've been using Python for a while now, and I've learned the hard way that managing dependencies can be a real pain. I've tried a bunch of different tools and methods to keep my projects clean and organized, but I've found that using virtual environments is the best way to go.</p> <p>In this guide, we'll walk through setting up a Python project named <code>Hummus_optimization</code>. We'll manage Python versions with Pyenv, isolate our project environment using virtual environments, and handle dependencies with Poetry. This project will serve as a simple example to demonstrate optimizing a hummus recipe based on user preferences for texture and taste.</p>"},{"location":"writing/2024/03/28/pip%20install%20pain%20%28why%20you%20should%20use%20different%20environments%20for%20different%20projects%29/#project-setup","title":"Project Setup","text":""},{"location":"writing/2024/03/28/pip%20install%20pain%20%28why%20you%20should%20use%20different%20environments%20for%20different%20projects%29/#step-1-install-pyenv","title":"Step 1: Install pyenv","text":"<p>Ensure Pyenv is installed on your system to manage Python versions. Follow the installation instructions provided in the initial part of this guide.</p>"},{"location":"writing/2024/03/28/pip%20install%20pain%20%28why%20you%20should%20use%20different%20environments%20for%20different%20projects%29/#installation-on-linux-and-macos","title":"Installation on Linux and macOS:","text":"<pre><code>curl https://pyenv.run | bash\n</code></pre> <p>After installing, add Pyenv to your shell by adding the following lines to your <code>.bashrc</code>, <code>.zshrc</code>, or<code>.profile</code> file:</p> <pre><code>export PATH=\"$HOME/.pyenv/bin:$PATH\"\neval \"$(pyenv init --path)\"\neval \"$(pyenv virtualenv-init -)\"\n</code></pre>"},{"location":"writing/2024/03/28/pip%20install%20pain%20%28why%20you%20should%20use%20different%20environments%20for%20different%20projects%29/#installation-on-windows","title":"Installation on Windows:","text":"<p>For Windows, use pyenv-win: <pre><code>pip install pyenv-win --target %USERPROFILE%\\.pyenv\n</code></pre> Then, add <code>%USERPROFILE%\\.pyenv\\pyenv-win\\bin</code> and <code>%USERPROFILE%\\.pyenv\\pyenv-win\\shims</code> to your system's environment variables.</p>"},{"location":"writing/2024/03/28/pip%20install%20pain%20%28why%20you%20should%20use%20different%20environments%20for%20different%20projects%29/#side-quest-install-different-python-versions","title":"Side Quest: Install different Python versions","text":"<p>With Pyenv installed, you can now install any version of Python you need. For example, to install Python 3.9.1:</p> <p><pre><code>pyenv install 3.9.1\n</code></pre> And to set it as the global version:</p> <pre><code>pyenv global 3.9.1\n</code></pre>"},{"location":"writing/2024/03/28/pip%20install%20pain%20%28why%20you%20should%20use%20different%20environments%20for%20different%20projects%29/#setting-a-local-python-version-for-a-project","title":"Setting a Local Python Version for a Project:","text":"<p>Navigate to the project directory and set the local Python version:</p> <p><pre><code>pyenv local 3.9.1\n</code></pre> This command sets the Python version to 3.9.1 specifically for the current project, overriding the global Python version.</p>"},{"location":"writing/2024/03/28/pip%20install%20pain%20%28why%20you%20should%20use%20different%20environments%20for%20different%20projects%29/#step-2-create-the-project-directory","title":"Step 2: Create the Project Directory","text":"<pre><code>mkdir Hummus_optimization\ncd Hummus_optimization\n</code></pre>"},{"location":"writing/2024/03/28/pip%20install%20pain%20%28why%20you%20should%20use%20different%20environments%20for%20different%20projects%29/#step-3-set-up-a-virtual-environment","title":"Step 3: Set Up a Virtual Environment","text":"<p>Within the project directory, create a virtual environment:</p> <pre><code>python -m venv .venv\nsource .venv/bin/activate  # On Linux/macOS\n.venv\\\\Scripts\\\\activate  # On Windows\n</code></pre>"},{"location":"writing/2024/03/28/pip%20install%20pain%20%28why%20you%20should%20use%20different%20environments%20for%20different%20projects%29/#step-4-using-poetry-for-dependency-management","title":"Step 4: Using Poetry for Dependency Management","text":"<p>Poetry is a tool for dependency management and packaging in Python. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.</p>"},{"location":"writing/2024/03/28/pip%20install%20pain%20%28why%20you%20should%20use%20different%20environments%20for%20different%20projects%29/#installation","title":"Installation:","text":"<pre><code>curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python -\n</code></pre> <p>Or on Windows, you can use PowerShell: <pre><code>(Invoke-WebRequest -Uri https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py -UseBasicParsing).Content | python -\n</code></pre></p> <p>Use Poetry to initialize the project, which creates a <code>pyproject.toml</code> file:</p> <pre><code>poetry init --name Hummus_optimization --dependency numpy:^1.19.2 --dependency scipy:^1.5.2 --no-interaction\n</code></pre> <p>This command also adds <code>numpy</code> and <code>scipy</code> as project dependencies.</p>"},{"location":"writing/2024/03/28/pip%20install%20pain%20%28why%20you%20should%20use%20different%20environments%20for%20different%20projects%29/#project-structure","title":"Project Structure","text":"<p>Create the following project structure:</p> <pre><code>Hummus_optimization/\n\u2502\n\u251c\u2500\u2500 hummus/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 optimizer.py\n\u2502\n\u251c\u2500\u2500 tests/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 test_optimizer.py\n\u2502\n\u2514\u2500\u2500 pyproject.toml\n</code></pre> <p>Use these commands to set up the structure:</p> <pre><code>mkdir hummus tests\ntouch hummus/__init__.py hummus/optimizer.py tests/__init__.py tests/test_optimizer.py\n</code></pre>"},{"location":"writing/2024/03/28/pip%20install%20pain%20%28why%20you%20should%20use%20different%20environments%20for%20different%20projects%29/#sample-code","title":"Sample Code","text":"<p>Add this sample code to <code>hummus/optimizer.py</code>:</p> <pre><code># hummus/optimizer.py\n\ndef optimize_hummus(taste_preference, texture_preference):\n    \"\"\"\n    Simulate optimizing a hummus recipe.\n    \"\"\"\n    taste_score = 90 if taste_preference == \"garlicky\" else 70\n    texture_score = 95 if texture_preference == \"creamy\" else 75\n\n    return (taste_score + texture_score) / 2\n</code></pre>"},{"location":"writing/2024/03/28/pip%20install%20pain%20%28why%20you%20should%20use%20different%20environments%20for%20different%20projects%29/#running-the-project","title":"Running the Project","text":"<p>Activate the Poetry-managed virtual environment:</p> <pre><code>poetry shell\n</code></pre> <p>Create a script, e.g., <code>run_optimizer.py</code>, to test the optimizer:</p> <pre><code># run_optimizer.py\n\nfrom hummus.optimizer import optimize_hummus\n\nscore = optimize_hummus(\"garlicky\", \"creamy\")\nprint(f\"Optimized Hummus Score: {score}\")\n</code></pre> <p>Run the script:</p> <pre><code>python run_optimizer.py\n</code></pre>"},{"location":"writing/2024/03/28/pip%20install%20pain%20%28why%20you%20should%20use%20different%20environments%20for%20different%20projects%29/#expected-output","title":"Expected Output","text":"<p>Optimized Hummus Score: 92.5</p>"},{"location":"writing/2024/03/28/pip%20install%20pain%20%28why%20you%20should%20use%20different%20environments%20for%20different%20projects%29/#adding-dependencies","title":"Adding Dependencies","text":"<p>To add more dependencies:</p> <pre><code>poetry add scipy  # Example\n</code></pre> <p>After adding more dependencies to your Python project using Poetry, there are a few steps and best practices you should follow to ensure your project remains organized and your team can work efficiently. Here's what you should do:</p>"},{"location":"writing/2024/03/28/pip%20install%20pain%20%28why%20you%20should%20use%20different%20environments%20for%20different%20projects%29/#step-5-update-pyprojecttoml-and-poetrylock","title":"Step 5: Update <code>pyproject.toml</code> and <code>poetry.lock</code>","text":"<p>When you add a new dependency using Poetry, it automatically updates the pyproject.toml file and the poetry.lock file. The pyproject.toml file declares your project's dependencies, while the poetry.lock file ensures that the exact versions of the dependencies are locked, providing consistency across all environments.</p>"},{"location":"writing/2024/03/28/pip%20install%20pain%20%28why%20you%20should%20use%20different%20environments%20for%20different%20projects%29/#step-6-intall-new-dependencies","title":"Step 6: Intall new dependencies","text":"<p>After adding the dependencies, run the following command to install them: <pre><code>poetry install\n</code></pre></p> <p>This command reads the pyproject.toml file and installs the dependencies specified there, ensuring that everyone working on the project has the same set of dependencies.</p>"},{"location":"writing/2024/02/28/Vowpal-Wabbit-i-hate-you/","title":"Vowpal Wabbit, I Hate You (Lessons I learned from using Vowpal Wabbit)","text":"<p>Vowpal Wabbit is a great tool</p> <p>I takes some time to understand and use it properly. This post is about my journey with Vowpal Wabbit and the lessons I learned from it.</p> <p>Hey everyone!</p> <p>So, for the last couple of years, I've been working with @Vowpal Wabbit (VW) and messing around with contextual bandit algorithms in Python. I've gotta say, VW is pretty awesome at what it does and it seems like everyone who's into bandits is using it. But man, trying to figure it out has been a bit of a headache\u2014the docs are super sparse, and there are all these little quirks and half-baked features.</p> <p>Being in the trenches, I've picked up a bunch of insights and face-palm moments that I wish someone had told me about from the start. What I'm sharing here is all the stuff that's made a difference for me while I've been working with VW. I'm hoping it'll make your life a bit easier too because, despite the pain, VW is kind of a hidden gem once you get it up and running.</p> <p>This post is mainly about the Python side of things but if you're more of a command-line wizard, you'll probably find it useful too, since the Python part is just a front for the command line. I've been playing with the <code>--cb_explore_adf</code> setting a ton, which is this super intricate and under-explained feature, but it's also super powerful for bandits. It lets you shuffle through actions and their features in a flexible way. That's what I\u2019m focusing on here, but if you're using VW for other bandit stuff, stick around\u2014you'll find some useful tips regardless.</p> <p>If you catch any goofs or if something seems off in what I\u2019ve shared, drop me a comment. I\u2019m all about learning and improving, so I\u2019ll keep updating this post as I get smarter.</p>"},{"location":"writing/archive/2024/","title":"2024","text":""},{"location":"writing/category/python/","title":"Python","text":""},{"location":"writing/category/virtual-environments/","title":"Virtual Environments","text":""},{"location":"writing/category/poetry/","title":"poetry","text":""},{"location":"writing/category/vowpal-wabbit/","title":"Vowpal Wabbit","text":""},{"location":"writing/category/machine-learning/","title":"Machine Learning","text":""},{"location":"writing/category/reinforcement-learning/","title":"Reinforcement Learning","text":""},{"location":"writing/category/multi-armed-bandit/","title":"Multi-Armed Bandit","text":""}]}